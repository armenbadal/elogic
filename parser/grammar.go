// Code generated by goyacc -p elo -o grammar.go grammar.y. DO NOT EDIT.

//line grammar.y:3
package parser

import __yyfmt__ "fmt"

//line grammar.y:3
import "container/list"

//line grammar.y:8
type eloSymType struct {
	yys  int
	name string
	list *list.List
}

const xScheme = 57346
const xEnd = 57347
const xFalse = 57348
const xTrue = 57349
const xArrow = 57350
const xNewLine = 57351
const xIdent = 57352

var eloToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"xScheme",
	"xEnd",
	"xFalse",
	"xTrue",
	"xArrow",
	"xNewLine",
	"xIdent",
}
var eloStatenames = [...]string{}

const eloEofCode = 1
const eloErrCode = 2
const eloInitialStackSize = 16

//line yacctab:1
var eloExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const eloPrivate = 57344

const eloLast = 30

var eloAct = [...]int{

	6, 14, 12, 7, 20, 8, 21, 19, 20, 20,
	20, 16, 10, 13, 17, 18, 13, 15, 9, 10,
	7, 22, 5, 23, 24, 11, 4, 3, 2, 1,
}
var eloPact = [...]int{

	-1000, -1000, 18, 11, 11, 8, 10, -1000, 3, 7,
	-1000, 6, -1000, 7, -1, -1000, -1000, -1000, -2, 7,
	-1000, 7, 0, -6, 10,
}
var eloPgo = [...]int{

	0, 1, 29, 28, 27, 0, 26, 25, 2,
}
var eloR1 = [...]int{

	0, 2, 3, 3, 4, 6, 1, 1, 7, 7,
	8, 5, 5,
}
var eloR2 = [...]int{

	0, 1, 3, 0, 4, 5, 2, 1, 2, 1,
	5, 2, 1,
}
var eloChk = [...]int{

	-1000, -2, -3, -4, -6, 4, -5, 9, -5, 10,
	9, -7, -8, 10, -1, 10, 5, -8, -1, 8,
	10, 8, -1, -1, -5,
}
var eloDef = [...]int{

	3, -2, 1, 0, 0, 0, 2, 12, 0, 0,
	11, 0, 9, 0, 0, 7, 4, 8, 0, 0,
	6, 0, 5, 0, 10,
}
var eloTok1 = [...]int{

	1,
}
var eloTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10,
}
var eloTok3 = [...]int{
	0,
}

var eloErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	eloDebug        = 0
	eloErrorVerbose = false
)

type eloLexer interface {
	Lex(lval *eloSymType) int
	Error(s string)
}

type eloParser interface {
	Parse(eloLexer) int
	Lookahead() int
}

type eloParserImpl struct {
	lval  eloSymType
	stack [eloInitialStackSize]eloSymType
	char  int
}

func (p *eloParserImpl) Lookahead() int {
	return p.char
}

func eloNewParser() eloParser {
	return &eloParserImpl{}
}

const eloFlag = -1000

func eloTokname(c int) string {
	if c >= 1 && c-1 < len(eloToknames) {
		if eloToknames[c-1] != "" {
			return eloToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func eloStatname(s int) string {
	if s >= 0 && s < len(eloStatenames) {
		if eloStatenames[s] != "" {
			return eloStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func eloErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !eloErrorVerbose {
		return "syntax error"
	}

	for _, e := range eloErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + eloTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := eloPact[state]
	for tok := TOKSTART; tok-1 < len(eloToknames); tok++ {
		if n := base + tok; n >= 0 && n < eloLast && eloChk[eloAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if eloDef[state] == -2 {
		i := 0
		for eloExca[i] != -1 || eloExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; eloExca[i] >= 0; i += 2 {
			tok := eloExca[i]
			if tok < TOKSTART || eloExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if eloExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += eloTokname(tok)
	}
	return res
}

func elolex1(lex eloLexer, lval *eloSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = eloTok1[0]
		goto out
	}
	if char < len(eloTok1) {
		token = eloTok1[char]
		goto out
	}
	if char >= eloPrivate {
		if char < eloPrivate+len(eloTok2) {
			token = eloTok2[char-eloPrivate]
			goto out
		}
	}
	for i := 0; i < len(eloTok3); i += 2 {
		token = eloTok3[i+0]
		if token == char {
			token = eloTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = eloTok2[1] /* unknown char */
	}
	if eloDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", eloTokname(token), uint(char))
	}
	return char, token
}

func eloParse(elolex eloLexer) int {
	return eloNewParser().Parse(elolex)
}

func (elorcvr *eloParserImpl) Parse(elolex eloLexer) int {
	var elon int
	var eloVAL eloSymType
	var eloDollar []eloSymType
	_ = eloDollar // silence set and not used
	eloS := elorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	elostate := 0
	elorcvr.char = -1
	elotoken := -1 // elorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		elostate = -1
		elorcvr.char = -1
		elotoken = -1
	}()
	elop := -1
	goto elostack

ret0:
	return 0

ret1:
	return 1

elostack:
	/* put a state and value onto the stack */
	if eloDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", eloTokname(elotoken), eloStatname(elostate))
	}

	elop++
	if elop >= len(eloS) {
		nyys := make([]eloSymType, len(eloS)*2)
		copy(nyys, eloS)
		eloS = nyys
	}
	eloS[elop] = eloVAL
	eloS[elop].yys = elostate

elonewstate:
	elon = eloPact[elostate]
	if elon <= eloFlag {
		goto elodefault /* simple state */
	}
	if elorcvr.char < 0 {
		elorcvr.char, elotoken = elolex1(elolex, &elorcvr.lval)
	}
	elon += elotoken
	if elon < 0 || elon >= eloLast {
		goto elodefault
	}
	elon = eloAct[elon]
	if eloChk[elon] == elotoken { /* valid shift */
		elorcvr.char = -1
		elotoken = -1
		eloVAL = elorcvr.lval
		elostate = elon
		if Errflag > 0 {
			Errflag--
		}
		goto elostack
	}

elodefault:
	/* default state action */
	elon = eloDef[elostate]
	if elon == -2 {
		if elorcvr.char < 0 {
			elorcvr.char, elotoken = elolex1(elolex, &elorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if eloExca[xi+0] == -1 && eloExca[xi+1] == elostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			elon = eloExca[xi+0]
			if elon < 0 || elon == elotoken {
				break
			}
		}
		elon = eloExca[xi+1]
		if elon < 0 {
			goto ret0
		}
	}
	if elon == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			elolex.Error(eloErrorMessage(elostate, elotoken))
			Nerrs++
			if eloDebug >= 1 {
				__yyfmt__.Printf("%s", eloStatname(elostate))
				__yyfmt__.Printf(" saw %s\n", eloTokname(elotoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for elop >= 0 {
				elon = eloPact[eloS[elop].yys] + eloErrCode
				if elon >= 0 && elon < eloLast {
					elostate = eloAct[elon] /* simulate a shift of "error" */
					if eloChk[elostate] == eloErrCode {
						goto elostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if eloDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", eloS[elop].yys)
				}
				elop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if eloDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", eloTokname(elotoken))
			}
			if elotoken == eloEofCode {
				goto ret1
			}
			elorcvr.char = -1
			elotoken = -1
			goto elonewstate /* try again in the same state */
		}
	}

	/* reduction by production elon */
	if eloDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", elon, eloStatname(elostate))
	}

	elont := elon
	elopt := elop
	_ = elopt // guard against "declared and not used"

	elop -= eloR2[elon]
	// elop is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if elop+1 >= len(eloS) {
		nyys := make([]eloSymType, len(eloS)*2)
		copy(nyys, eloS)
		eloS = nyys
	}
	eloVAL = eloS[elop+1]

	/* consult goto table to find next state */
	elon = eloR1[elon]
	elog := eloPgo[elon]
	eloj := elog + eloS[elop].yys + 1

	if eloj >= eloLast {
		elostate = eloAct[elog]
	} else {
		elostate = eloAct[eloj]
		if eloChk[elostate] != -elon {
			elostate = eloAct[elog]
		}
	}
	// dummy call; replaced with literal code
	switch elont {

	case 6:
		eloDollar = eloS[elopt-2 : elopt+1]
		//line grammar.y:43
		{
			eloVAL.list = nil
		}
	case 7:
		eloDollar = eloS[elopt-1 : elopt+1]
		//line grammar.y:47
		{
			eloVAL.list = nil
		}
	}
	goto elostack /* stack new state and value */
}
